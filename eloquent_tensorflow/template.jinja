#pragma once

#ifdef __has_attribute
#define HAVE_ATTRIBUTE(x) __has_attribute(x)
#else
#define HAVE_ATTRIBUTE(x) 0
#endif
#if HAVE_ATTRIBUTE(aligned) || (defined(__GNUC__) && !defined(__clang__))
#define DATA_ALIGN_ATTRIBUTE __attribute__((aligned(4)))
#else
#define DATA_ALIGN_ATTRIBUTE
#endif

// automatically configure network
{% if num_inputs is not none %}#define TF_NUM_INPUTS {{ num_inputs }}{% endif %}
{% if num_outputs is not none %}#define TF_NUM_OUTPUTS {{ num_outputs }}{% endif %}
#define TF_NUM_OPS {{ allowed_layers | length }}

{% if allowed_layers | length > 0 %}/**
 * Call this function to register the ops
 * that have been detected
 */
template<class TF>
void registerNetworkOps(TF& nn) {
    {% for layer in allowed_layers %}nn.resolver.Add{{ layer }}();
    {% endfor %}
}
{% endif %}

{% if not_allowed_layers | length %}// these layers are used in Python
// but are not allowed in Arduino
{% for layer in not_allowed_layers %}// - {{ layer }}
{% endfor %}{% endif %}

// model data
const unsigned char {{ model_name }}[{{ model_size }}] DATA_ALIGN_ATTRIBUTE = { {{ bytes_array }} };